// lesson 3

// -----

// ### **Шаг 1: Анонс и Теория ("Почему и Как")**

// **Упражнение 3/100: Булевы значения и операторы сравнения.**

// Мы научились работать с текстом и числами. Теперь пришло время научить нашу программу принимать решения. Для этого существует третий примитивный тип данных.

// 1.  **Тип данных `Boolean` (Булев)**

//       * **Что это?** Самый простой тип данных. У него может быть всего два значения: `true` (истина) и `false` (ложь). Его можно представить как выключатель света: либо включен (`true`), либо выключен (`false`).
//       * **Зачем нужен?** Чтобы программа могла отвечать на вопросы "да/нет". Например: "Пользователь старше 18 лет?", "Пароли совпадают?". Результат такого вопроса — это и есть булево значение.

// 2.  **Операторы сравнения**

//       * **Что это?** Это операторы, которые сравнивают два значения и, в отличие от арифметических операторов, **возвращают** булево значение (`true` или `false`).

//       * **Какие бывают?**

//           * `>` — больше чем
//           * `<` — меньше чем
//           * `>=` — больше или равно
//           * `<=` — меньше или равно

//       * **Примеры:**
//         `let result = 5 > 3;` // result будет равен true
//         `let anotherResult = 10 <= 9;` // anotherResult будет равен false

// 3.  **Важнейшая тема: Строгое (`===`) против нестрогого (`==`) равенства**
//     В JavaScript есть два способа проверить значения на равенство, и разница между ними критически важна.

//       * `==` **(Нестрогое или "loose" равенство):** Сравнивает значения, пытаясь **привести их к одному типу**.
//         `5 == "5"` вернет `true`. JavaScript "подумал", что ты хочешь сравнить два числа, и превратил строку `"5"` в число `5`. **Это поведение опасно и приводит к ошибкам.**
//       * `===` **(Строгое или "strict" равенство):** Сравнивает и **значения**, и **типы** без всяких приведений.
//         `5 === "5"` вернет `false`, потому что число не равно строке.

//     **Золотое правило:** **Всегда используй строгое равенство (`===`) и неравенство (`!==`)**. Это сделает твой код предсказуемым и безопасным.

//     Функция может напрямую вернуть результат сравнения:

//     ```javascript
//     function isPositive(number) {
//       return number > 0; // Результатом выражения `number > 0` будет либо true, либо false
//     }
//     ```

// -----

// ### **Шаг 2: Постановка Задачи ("Что")**

// **Задача:** Напиши функцию `isAdult`, которая принимает один аргумент — `age` (возраст).

// Функция должна возвращать `true`, если возраст `age` **больше или равен** 18. В противном случае функция должна возвращать `false`.

// **Примеры:**

// 1.  **Входные данные:** `isAdult(25)`

//       * **Выходные данные (результат):** `true`

// 2.  **Входные данные:** `isAdult(18)`

//       * **Выходные данные (результат):** `true`

// 3.  **Входные данные:** `isAdult(10)`

//       * **Выходные данные (результат):** `false`

// **Ограничения:**

//   * Имя функции должно быть `isAdult`.
//   * Решение должно быть максимально лаконичным, без использования `if/else`.

// -----

// ### **Шаг 3: Ожидание Решения**

// Твой ход.


const isAdult = age => age >= 18;

isAdult(19);
