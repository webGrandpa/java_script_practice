// lesson 2
// Прекрасно. Двигаемся дальше.

// -----

// ### **Шаг 1: Анонс и Теория ("Почему и Как")**

// **Упражнение 2/100: Числа и арифметические операторы.**

// В прошлом упражнении мы работали со строками (`string`). Теперь перейдем ко второму фундаментальному типу данных — числам (`number`).

// 1.  **Тип данных `Number`**

//       * **Что это?** В JavaScript этот тип используется для представления как целых чисел (например, `10`, `-5`, `0`), так и чисел с плавающей точкой (дробных, например, `3.14`, `-0.5`).
//       * **Зачем нужен?** Чтобы выполнять математические вычисления — основу огромного количества программ, от калькуляторов до сложных финансовых моделей.

// 2.  **Арифметические операторы**

//       * **Что это?** Это символы, которые выполняют математические операции над числами.
//       * **Какие бывают (основные)?**
//           * `+`  **Сложение:** `5 + 10` вернет `15`.
//           * `-`  **Вычитание:** `20 - 8` вернет `12`.
//           * `*`  **Умножение:** `7 * 3` вернет `21`.
//           * `/`  **Деление:** `10 / 2` вернет `5`.

// 3.  **Функции с несколькими параметрами**

//       * Функция не ограничена одним "ингредиентом". Мы можем передавать ей столько параметров, сколько нужно, перечисляя их через запятую.
//       * **Пример:**
//         ```javascript
//         function printTwoWords(word1, word2) {
//           console.log(word1, word2); // Выведет в консоль оба слова
//         }

//         printTwoWords("Hello", "World");
//         ```
//       * Внутри функции `word1` будет равно `"Hello"`, а `word2` — `"World"`.

// Наша цель в этом упражнении — объединить эти знания: написать функцию, которая принимает два числовых параметра и выполняет над ними базовую арифметическую операцию.

// -----

// ### **Шаг 2: Постановка Задачи ("Что")**

// **Задача:** Напиши функцию с именем `sum`, которая принимает два числовых аргумента, `a` и `b`.

// Функция должна **вернуть** (`return`) их сумму.

// **Примеры:**

// 1.  **Входные данные:** `sum(5, 10)`

//       * **Выходные данные (результат):** `15`

// 2.  **Входные данные:** `sum(-1, 8)`

//       * **Выходные данные (результат):** `7`

// 3.  **Входные данные:** `sum(1.5, 2.5)`

//       * **Выходные данные (результат):** `4`

// **Ограничения:**

//   * Имя функции должно быть `sum`.
//   * Функция должна принимать ровно два параметра.

// -----

// ### **Шаг 3: Ожидание Решения**

// Жду твой код.


const sum = (a, b) => {
    return (typeof a === "number" && typeof b === "number") ? a + b : `Please write a number`;
    
}

sum(6, 7);

