//lesson 1
// Отлично, начинаем наш путь к мастерству. Я готов стать твоим ментором и провести тебя через все 100 ступеней. Дисциплина и глубокое понимание — вот наш ключ к успеху.

// Следуем протоколу.

// -----

// ### **Шаг 1: Анонс и Теория ("Почему и Как")**

// **Упражнение 1/100: Переменные, типы данных и первая функция.**

// Прежде чем мы напишем хоть одну строчку кода для решения задачи, давай заложим фундамент. Нам нужно понять три кита, на которых держится любая простейшая программа.

// 1.  **Переменные (Variables)**

//       * **Что это?** Представь себе подписанную коробку, в которую ты можешь что-то положить. Имя коробки — это **имя переменной**, а её содержимое — это её **значение**.
//       * **Зачем нужны?** Чтобы хранить информацию, давать ей имя и использовать многократно в программе. Без них нам бы пришлось каждый раз заново вводить одни и те же данные.
//       * **Как использовать?** В современном JavaScript для создания переменных используются ключевые слова `let` и `const`.
//           * `let name = "Алекс";` — Мы создали "коробку" с именем `name` и положили в неё текст "Алекс". Содержимое этой коробки можно поменять позже.
//           * `const year = 2025;` — Мы создали константу. Её значение **нельзя** изменить после создания. Это как коробка, которую запечатали намертво. Используй `const` всегда, когда знаешь, что значение не будет меняться — это делает код безопаснее.

// 2.  **Типы данных (Data Types)**

//       * **Что это?** Это классификация данных. JavaScript должен понимать, с чем он работает: с текстом, с числом, с чем-то еще.
//       * **Зачем нужны?** Тип данных определяет, какие операции можно совершать со значением. Например, числа можно складывать и умножать, а строки (текст) — объединять.
//       * **Какие бывают (самые базовые)?**
//           * **String (строка):** Текст, всегда заключается в кавычки (`""`, `''` или ` `` `). Пример: `let message = "Привет, мир!";`
//           * **Number (число):** Любые числа — целые или дробные. Пример: `let temperature = 25.5;`

// 3.  **Функции (Functions)**

//       * **Что это?** Это именованный, многократно используемый блок кода, созданный для выполнения конкретной задачи. Это как рецепт в кулинарной книге: у него есть имя (например, "Приготовить борщ"), список ингредиентов (это **параметры** или **аргументы**), и он возвращает готовое блюдо (это **возвращаемое значение**).
//       * **Зачем нужны?** Чтобы не повторять один и тот же код снова и снова (принцип DRY - Don't Repeat Yourself) и чтобы структурировать программу, разбивая её на логические, понятные части.
//       * **Как использовать (базовый синтаксис)?**
//         ```javascript
//         function имяФункции(параметр1, параметр2) {
//           // Тело функции: здесь происходит вся работа
//           // ...
//           return результат; // Ключевое слово `return` отдает результат наружу
//         }
//         ```

// Для нашей первой задачи нам понадобится объединять строки. В JavaScript это делается с помощью оператора `+` (он называется "оператор конкатенации", когда работает со строками).

// `"Привет, " + "мир!"`  даст в результате  `"Привет, мир!"`.

// Теории достаточно. Переходим к практике.

// -----

// ### **Шаг 2: Постановка Задачи ("Что")**

// **Задача:** Напиши функцию с именем `createGreeting`, которая принимает один аргумент (параметр) — `name`.

// Внутри функции нужно создать строку приветствия, которая объединяет текст `"Привет, "` и полученное имя `name`. В конце имени должен стоять восклицательный знак.

// Функция должна **вернуть** (`return`) эту созданную строку.

// **Примеры:**

// 1.  **Входные данные:** `createGreeting("Анна")`

//       * **Выходные данные (результат):** `"Привет, Анна!"`

// 2.  **Входные данные:** `createGreeting("Иван")`

//       * **Выходные данные (результат):** `"Привет, Иван!"`

// **Ограничения:**

//   * Имя функции должно быть строго `createGreeting`.
//   * Функция должна принимать ровно один параметр.

// -----

// ### **Шаг 3: Ожидание Решения**

// Теперь твоя очередь. Напиши свой код. Я жду твоего решения.


const createGreeting = (name) => {
    if (typeof name !== "string") {
        return `Please provide a name as a string.`
    } else {
        return `Hello, ${name}!`
    }
}

createGreeting("Gemini");

// with ternary operator, its shorter

// const createGreeting = (name) => {
//   return typeof name === "string" ? `Привет, ${name}!` : "Please provide a name as a string.";
// }